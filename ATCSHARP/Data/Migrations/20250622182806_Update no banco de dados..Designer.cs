// <auto-generated />
using System;
using ATCSHARP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ATCSHARP.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250622182806_Update no banco de dados.")]
    partial class Updatenobancodedados
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ATCSHARP.Models.CidadeDestino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nome_Cidade");

                    b.Property<int>("PaisDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("Pais_Destino_Id");

                    b.HasKey("Id");

                    b.HasIndex("PaisDestinoId");

                    b.ToTable("Cidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Rio de Janeiro",
                            PaisDestinoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Nome = "São Paulo",
                            PaisDestinoId = 1
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Lisboa",
                            PaisDestinoId = 2
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Porto",
                            PaisDestinoId = 2
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Zurique",
                            PaisDestinoId = 3
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Genebra",
                            PaisDestinoId = 3
                        });
                });

            modelBuilder.Entity("ATCSHARP.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email_Cliente");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nome_Cliente");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "taylan@gmail.com",
                            Nome = "Taylan Silva"
                        },
                        new
                        {
                            Id = 2,
                            Email = "richard@gmail.com",
                            Nome = "Richard Alves"
                        },
                        new
                        {
                            Id = 3,
                            Email = "guilherme@gmail.com",
                            Nome = "Guilherme Pirozi"
                        });
                });

            modelBuilder.Entity("ATCSHARP.Models.Destino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CidadeDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("Cidade_Destino_Id");

                    b.Property<int>("PacoteTuristicoId")
                        .HasColumnType("int")
                        .HasColumnName("Pacote_Turistico_Id");

                    b.HasKey("Id");

                    b.HasIndex("CidadeDestinoId");

                    b.HasIndex("PacoteTuristicoId");

                    b.ToTable("Destinos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CidadeDestinoId = 1,
                            PacoteTuristicoId = 1
                        },
                        new
                        {
                            Id = 2,
                            CidadeDestinoId = 2,
                            PacoteTuristicoId = 1
                        },
                        new
                        {
                            Id = 3,
                            CidadeDestinoId = 3,
                            PacoteTuristicoId = 2
                        },
                        new
                        {
                            Id = 4,
                            CidadeDestinoId = 4,
                            PacoteTuristicoId = 2
                        },
                        new
                        {
                            Id = 5,
                            CidadeDestinoId = 5,
                            PacoteTuristicoId = 3
                        },
                        new
                        {
                            Id = 6,
                            CidadeDestinoId = 6,
                            PacoteTuristicoId = 3
                        });
                });

            modelBuilder.Entity("ATCSHARP.Models.PacoteTuristico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacidadeMaxima")
                        .HasColumnType("int")
                        .HasColumnName("Capacidade_Maxima");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Inicio");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteAt");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Descricao_Pacote");

                    b.Property<double>("Preco")
                        .HasColumnType("float")
                        .HasColumnName("Preco_Pacote");

                    b.Property<string>("Titulo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Titulo_Pacote");

                    b.HasKey("Id");

                    b.ToTable("Pacotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CapacidadeMaxima = 20,
                            DataInicio = new DateTime(2025, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Desfrute do melhor do Rio de Janeiro e São Paulo",
                            Preco = 1500.0,
                            Titulo = "Pacote Rio Verão"
                        },
                        new
                        {
                            Id = 2,
                            CapacidadeMaxima = 15,
                            DataInicio = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "A história e charme de Lisboa e Porto",
                            Preco = 1800.0,
                            Titulo = "Descubra Portugal"
                        },
                        new
                        {
                            Id = 3,
                            CapacidadeMaxima = 10,
                            DataInicio = new DateTime(2026, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Explore Zurique e Genebra",
                            Preco = 2500.0,
                            Titulo = "Alpes Suíços"
                        });
                });

            modelBuilder.Entity("ATCSHARP.Models.PaisDestino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nome_Pais");

                    b.HasKey("Id");

                    b.ToTable("Paises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Brasil"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Portugal"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Suíça"
                        });
                });

            modelBuilder.Entity("ATCSHARP.Models.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("Cliente_Id");

                    b.Property<DateTime>("DataReserva")
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Reserva");

                    b.Property<int>("PacoteTuristicoId")
                        .HasColumnType("int")
                        .HasColumnName("Pacote_Turistico_Id");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PacoteTuristicoId");

                    b.ToTable("Reservas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteId = 1,
                            DataReserva = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacoteTuristicoId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClienteId = 2,
                            DataReserva = new DateTime(2025, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacoteTuristicoId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClienteId = 1,
                            DataReserva = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacoteTuristicoId = 3
                        },
                        new
                        {
                            Id = 4,
                            ClienteId = 3,
                            DataReserva = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacoteTuristicoId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ATCSHARP.Models.CidadeDestino", b =>
                {
                    b.HasOne("ATCSHARP.Models.PaisDestino", "PaisDestino")
                        .WithMany("Cidades")
                        .HasForeignKey("PaisDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaisDestino");
                });

            modelBuilder.Entity("ATCSHARP.Models.Destino", b =>
                {
                    b.HasOne("ATCSHARP.Models.CidadeDestino", "CidadeDestino")
                        .WithMany()
                        .HasForeignKey("CidadeDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ATCSHARP.Models.PacoteTuristico", "PacoteTuristico")
                        .WithMany("Destinos")
                        .HasForeignKey("PacoteTuristicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CidadeDestino");

                    b.Navigation("PacoteTuristico");
                });

            modelBuilder.Entity("ATCSHARP.Models.Reserva", b =>
                {
                    b.HasOne("ATCSHARP.Models.Cliente", "Cliente")
                        .WithMany("Reservas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ATCSHARP.Models.PacoteTuristico", "PacoteTuristico")
                        .WithMany("Reservas")
                        .HasForeignKey("PacoteTuristicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("PacoteTuristico");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATCSHARP.Models.Cliente", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("ATCSHARP.Models.PacoteTuristico", b =>
                {
                    b.Navigation("Destinos");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("ATCSHARP.Models.PaisDestino", b =>
                {
                    b.Navigation("Cidades");
                });
#pragma warning restore 612, 618
        }
    }
}
